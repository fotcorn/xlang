%import common.WS
%import common.WS_INLINE
%import common.CPP_COMMENT
%import common.C_COMMENT

%ignore WS
%ignore CPP_COMMENT
%ignore C_COMMENT

_WS_INLINE: WS_INLINE

?start: translation_unit

translation_unit: (struct_def | function_def | enum_def)*

enum_def: "enum" _WS_INLINE IDENTIFIER "{" enum_entry+ "}"
enum_entry: IDENTIFIER ","?

!function_param: IDENTIFIER":" "*"? type
function_params: function_param | function_params "," function_param
function_def: "func" _WS_INLINE IDENTIFIER "(" function_params? ")" (":" type)? code_block

struct_entry: IDENTIFIER ":" type ("=" (integer_constant | float_constant | string_literal | boolean_literal | var_access))? ","
struct_def: "struct" _WS_INLINE IDENTIFIER "{" struct_entry+ "}"

IDENTIFIER: /[a-zA-Z_][a-zA-Z_0-9]*/
INTEGER: (/[1-9][0-9]*/ | "0" )
FLOAT: /([1-9][0-9]*|0)\.[0-9]+/
STRING_LITERAL: /"[^"]*"/
CHAR_LITERAL: /'[^']'/
array_access: "[" compare_expr "]"
var_access: IDENTIFIER array_access? ("." (var_access|function_call))?

code_block: "{" statement* "}"

?statement: loop | if_statement | function_call ";" | variable_def | const_def | variable_dec | variable_assign | var_access ";" | control ";"
!loop: "loop" code_block
elif_statement: "elif" "(" compare_expr ")" code_block
!else_statement: "else" code_block
if_statement: "if" "(" compare_expr ")" code_block elif_statement* else_statement?

variable_def: "var" _WS_INLINE IDENTIFIER ":" type "=" compare_expr ";"
const_def: "const" _WS_INLINE IDENTIFIER ":" type "=" compare_expr ";"
variable_dec: "var" _WS_INLINE IDENTIFIER ":" type ";"
variable_assign: var_access "=" compare_expr ";"
!control: ("break" | "continue" | "return" compare_expr?)

function_call: IDENTIFIER "(" (compare_expr? | compare_expr ("," compare_expr)*) ")"
integer_constant: INTEGER
string_literal: STRING_LITERAL
char_literal: CHAR_LITERAL
float_constant: FLOAT
!boolean_literal: ("false" | "true")
?primary_expression: var_access | function_call | integer_constant | float_constant | string_literal | char_literal | boolean_literal | "(" compare_expr ")"

!?mul_div_expr: primary_expression | (mul_div_expr "*" primary_expression) | (mul_div_expr "/" primary_expression) | (mul_div_expr "%" primary_expression)
!?add_sub_expr: mul_div_expr | (add_sub_expr "+" mul_div_expr) | (add_sub_expr "-" mul_div_expr)
!?compare_expr: add_sub_expr | (compare_expr compare_operator add_sub_expr)

!?compare_operator: "==" | "!=" | ">=" | ">" | "<" | "<="

!type: IDENTIFIER | "[" IDENTIFIER "]"
